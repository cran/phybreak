// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// likseq
double likseq(IntegerVector SNPs, IntegerVector SNPfreqs, IntegerVector nodeparents, NumericVector nodetimes, double mutrate, int Nsamples);
RcppExport SEXP _phybreak_likseq(SEXP SNPsSEXP, SEXP SNPfreqsSEXP, SEXP nodeparentsSEXP, SEXP nodetimesSEXP, SEXP mutrateSEXP, SEXP NsamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SNPs(SNPsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SNPfreqs(SNPfreqsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodeparents(nodeparentsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodetimes(nodetimesSEXP);
    Rcpp::traits::input_parameter< double >::type mutrate(mutrateSEXP);
    Rcpp::traits::input_parameter< int >::type Nsamples(NsamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(likseq(SNPs, SNPfreqs, nodeparents, nodetimes, mutrate, Nsamples));
    return rcpp_result_gen;
END_RCPP
}
// likseqenv
double likseqenv(Environment pbenv, IntegerVector nodestochange, IntegerVector tips);
RcppExport SEXP _phybreak_likseqenv(SEXP pbenvSEXP, SEXP nodestochangeSEXP, SEXP tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type pbenv(pbenvSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodestochange(nodestochangeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tips(tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(likseqenv(pbenv, nodestochange, tips));
    return rcpp_result_gen;
END_RCPP
}
// CCphylotree
std::vector<double> CCphylotree(const std::vector<int>& pars, const std::vector<double>& tims, std::vector<int> dims);
RcppExport SEXP _phybreak_CCphylotree(SEXP parsSEXP, SEXP timsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tims(timsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(CCphylotree(pars, tims, dims));
    return rcpp_result_gen;
END_RCPP
}
// CCtranstree
std::vector<double> CCtranstree(const std::vector<int>& pars, const std::vector<double>& tims, std::vector<int> dims);
RcppExport SEXP _phybreak_CCtranstree(SEXP parsSEXP, SEXP timsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tims(timsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(CCtranstree(pars, tims, dims));
    return rcpp_result_gen;
END_RCPP
}
// ptr
std::vector<int> ptr(IntegerVector pars, int ID);
RcppExport SEXP _phybreak_ptr(SEXP parsSEXP, SEXP IDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< int >::type ID(IDSEXP);
    rcpp_result_gen = Rcpp::wrap(ptr(pars, ID));
    return rcpp_result_gen;
END_RCPP
}
// sctwh3
NumericVector sctwh3(NumericVector tle);
RcppExport SEXP _phybreak_sctwh3(SEXP tleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tle(tleSEXP);
    rcpp_result_gen = Rcpp::wrap(sctwh3(tle));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phybreak_likseq", (DL_FUNC) &_phybreak_likseq, 6},
    {"_phybreak_likseqenv", (DL_FUNC) &_phybreak_likseqenv, 3},
    {"_phybreak_CCphylotree", (DL_FUNC) &_phybreak_CCphylotree, 3},
    {"_phybreak_CCtranstree", (DL_FUNC) &_phybreak_CCtranstree, 3},
    {"_phybreak_ptr", (DL_FUNC) &_phybreak_ptr, 2},
    {"_phybreak_sctwh3", (DL_FUNC) &_phybreak_sctwh3, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_phybreak(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
